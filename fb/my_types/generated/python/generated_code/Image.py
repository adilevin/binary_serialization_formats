# automatically generated by the FlatBuffers compiler, do not modify

# namespace: generated_code

import flatbuffers

class Image(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsImage(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Image()
        x.Init(buf, n + offset)
        return x

    # Image
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Image
    def Dim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .Dimensions import Dimensions
            obj = Dimensions()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Image
    def Pixels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Image
    def PixelsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Image
    def PixelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Image
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def ImageStart(builder): builder.StartObject(3)
def ImageAddDim(builder, dim): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dim), 0)
def ImageAddPixels(builder, pixels): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pixels), 0)
def ImageStartPixelsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ImageAddTimestamp(builder, timestamp): builder.PrependUint64Slot(2, timestamp, 0)
def ImageEnd(builder): return builder.EndObject()
